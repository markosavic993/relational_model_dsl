package Relax.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(4);
  /*package*/ final ConceptDescriptor myConceptAttribute = createDescriptorForAttribute();
  /*package*/ final ConceptDescriptor myConceptPrimaryKey = createDescriptorForPrimaryKey();
  /*package*/ final ConceptDescriptor myConceptRelation = createDescriptorForRelation();
  /*package*/ final ConceptDescriptor myConceptType = createDescriptorForType();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAttribute.getId(), 0);
    myIndexMap.put(myConceptPrimaryKey.getId(), 1);
    myIndexMap.put(myConceptRelation.getId(), 2);
    myIndexMap.put(myConceptType.getId(), 3);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAttribute, myConceptPrimaryKey, myConceptRelation, myConceptType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAttribute;
      case 1:
        return myConceptPrimaryKey;
      case 2:
        return myConceptRelation;
      case 3:
        return myConceptType;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAttribute() {
    return new ConceptDescriptorBuilder("Relax.structure.Attribute", MetaIdFactory.conceptId(0x29b7973dd23d4299L, 0x80d1b1e9c7b757ebL, 0x4c9d8354dd73f81dL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x4c9d8354dd73f828L, "type", MetaIdFactory.conceptId(0x29b7973dd23d4299L, 0x80d1b1e9c7b757ebL, 0x4c9d8354dd73f821L), false, false, false, new SNodePointer("r:794d8806-c6f0-49e5-af5d-a01a75ed0724(Relax.structure)", "5520713118741952552"))).children(new String[]{"type"}, new boolean[]{false}).alias("attribute", "Concept of attribute").sourceNode(new SNodePointer("r:794d8806-c6f0-49e5-af5d-a01a75ed0724(Relax.structure)", "5520713118741952541")).create();
  }
  private static ConceptDescriptor createDescriptorForPrimaryKey() {
    return new ConceptDescriptorBuilder("Relax.structure.PrimaryKey", MetaIdFactory.conceptId(0x29b7973dd23d4299L, 0x80d1b1e9c7b757ebL, 0x4c9d8354dd75bdd0L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x4c9d8354dd75bdd1L, "attributes", MetaIdFactory.conceptId(0x29b7973dd23d4299L, 0x80d1b1e9c7b757ebL, 0x4c9d8354dd73f81dL), false, true, false, new SNodePointer("r:794d8806-c6f0-49e5-af5d-a01a75ed0724(Relax.structure)", "5520713118742068689"))).children(new String[]{"attributes"}, new boolean[]{true}).alias("primary_key", "Concept for primary key").sourceNode(new SNodePointer("r:794d8806-c6f0-49e5-af5d-a01a75ed0724(Relax.structure)", "5520713118742068688")).create();
  }
  private static ConceptDescriptor createDescriptorForRelation() {
    return new ConceptDescriptorBuilder("Relax.structure.Relation", MetaIdFactory.conceptId(0x29b7973dd23d4299L, 0x80d1b1e9c7b757ebL, 0x4c9d8354dd73f809L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x4c9d8354dd75bf1aL, "primary_key", MetaIdFactory.conceptId(0x29b7973dd23d4299L, 0x80d1b1e9c7b757ebL, 0x4c9d8354dd75bdd0L), false, false, false, new SNodePointer("r:794d8806-c6f0-49e5-af5d-a01a75ed0724(Relax.structure)", "5520713118742069018")), new ConceptDescriptorBuilder.Link(0x4c9d8354dd73f82bL, "attributes", MetaIdFactory.conceptId(0x29b7973dd23d4299L, 0x80d1b1e9c7b757ebL, 0x4c9d8354dd73f81dL), false, true, false, new SNodePointer("r:794d8806-c6f0-49e5-af5d-a01a75ed0724(Relax.structure)", "5520713118741952555"))).children(new String[]{"primary_key", "attributes"}, new boolean[]{false, true}).rootable().alias("relation", "Concept of relation").sourceNode(new SNodePointer("r:794d8806-c6f0-49e5-af5d-a01a75ed0724(Relax.structure)", "5520713118741952521")).create();
  }
  private static ConceptDescriptor createDescriptorForType() {
    return new ConceptDescriptorBuilder("Relax.structure.Type", MetaIdFactory.conceptId(0x29b7973dd23d4299L, 0x80d1b1e9c7b757ebL, 0x4c9d8354dd73f821L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).alias("type", "Concept of type").sourceNode(new SNodePointer("r:794d8806-c6f0-49e5-af5d-a01a75ed0724(Relax.structure)", "5520713118741952545")).create();
  }
}
